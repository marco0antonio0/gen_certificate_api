name: üöÄ Deploy EC2 via SSH + Docker

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    name: üß∞ Deploy 
    runs-on: ubuntu-latest
    environment: production
    env:
      BRANCH: main
      TYPE_BUILD: t2.medium
      TYPE_INITIAL: t2.micro
      AWS_DEFAULT_REGION: us-east-1
      DEPLOY_DIR: /home/admin/dev/gen_certificate

    steps:
      - name: Instalar AWS CLI se necess√°rio
        run: |
          if ! command -v aws &>/dev/null; then
            echo "üß∞ AWS CLI n√£o encontrada, instalando..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
            rm -rf aws awscliv2.zip
          else
            echo "‚úÖ AWS CLI j√° est√° instalada: $(aws --version)"
          fi

      - name: üîê Configurar AWS CLI
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_DEFAULT_REGION"

      - name: ‚öôÔ∏è Escalar inst√¢ncia para Build
        run: |
          export INSTANCE_ID="${{ secrets.EC2_INSTANCE_ID }}"
          aws ec2 stop-instances --instance-ids "$INSTANCE_ID"
          aws ec2 wait instance-stopped --instance-ids "$INSTANCE_ID"
          aws ec2 modify-instance-attribute --instance-id "$INSTANCE_ID" --instance-type "{\"Value\": \"${TYPE_BUILD}\"}"
          aws ec2 start-instances --instance-ids "$INSTANCE_ID"
          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          echo "‚úÖ Inst√¢ncia escalada para $TYPE_BUILD"

      - name: üß™ SSH Deploy + Docker
        if: always()
        continue-on-error: true
        run: |
          export EC2_USER="${{ secrets.EC2_USER }}"
          export EC2_HOST="${{ secrets.EC2_HOST }}"
          export SSH_KEY_B64="${{ secrets.EC2_SSH_KEY }}"

          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > chave.pem
          chmod 400 chave.pem

          for i in {1..30}; do
            echo "‚è≥ Aguardando SSH responder ($i/30)..."
            if nc -z "$EC2_HOST" 22; then
              echo "‚úÖ Porta 22 (SSH) dispon√≠vel"
              break
            fi
            sleep 5
          done

          ssh -i chave.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST bash <<EOF
          set -e
          printf '=%.0s' {1..63}; echo
          echo -e "               üñß Conex√£o SSH estabelecida"
          printf '=%.0s' {1..63}; echo

          cd "$DEPLOY_DIR"
          if [ -d ".git" ]; then
            echo "üîÑ Resetando c√≥digo..."
            git fetch origin
            git reset --hard "origin/$BRANCH"
            git clean -fd
          else
            echo "‚ùå Pasta n√£o √© um reposit√≥rio Git."
            exit 1
          fi

          echo "üê≥ Verificando containers..."
          docker ps -a --format '{{.Names}}' | grep -q . && docker-compose down || echo "Nenhum container ativo."

          echo "üöÄ Subindo containers com build..."
          if docker-compose up -d --build > /dev/null 2>&1; then
            echo -e "‚úÖ [OK] Deploy finalizado com sucesso."
          else
            echo -e "‚ùå [ERRO] Deploy falhou durante o build/start."
            exit 1
          fi

          printf '=%.0s' {1..63}; echo
          echo -e "               üîö Conex√£o SSH encerrada"
          printf '=%.0s' {1..63}; echo
          EOF

      - name: üîΩ Escalar inst√¢ncia para tipo original
        if: always()
        continue-on-error: true
        run: |
          export INSTANCE_ID="${{ secrets.EC2_INSTANCE_ID }}"
          aws ec2 stop-instances --instance-ids "$INSTANCE_ID"
          aws ec2 wait instance-stopped --instance-ids "$INSTANCE_ID"
          aws ec2 modify-instance-attribute --instance-id "$INSTANCE_ID" --instance-type "{\"Value\": \"${TYPE_INITIAL}\"}"
          aws ec2 start-instances --instance-ids "$INSTANCE_ID"
          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          echo "üßπ Inst√¢ncia restaurada para $TYPE_INITIAL"

      - name: üßº Limpeza final
        if: always()
        continue-on-error: true
        run: |
          rm -f chave.pem || true
          echo "üßº Workflow finalizado e limpo."
